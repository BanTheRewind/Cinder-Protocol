#pragma once

#include "BodyInterface.h"
#include "CommandInterface.h"

enum : size_t
{
	ABOR, ACCT, ADAT, ALLO, APPE, AUTH, CCC, CDUP, CONF, CWD, 
	DELE, ENC, EPRT, EPSV, FEAT, HELP, LANG, LIST, LPRT, LPSV, 
	MDTM, MIC, MKD, MLSD, MLST, MODE, NLST, NOOP, OPTS, PASS, 
	PASV, PBSZ, PORT, PROT, PWD, QUIT, REIN, REST, RETR, RMD, 
	RNFR, RNTO, SITE, SIZE, SMNT, STAT, STOR, STOU, STRU, SYST, 
	TYPE, USER, XCUP, XMKD, XPWD, XRCP, XRMD, XRSQ, XSEM, XSEN
} typedef FtpCommand;

enum : size_t
{
	FTP_RC_110_RESTART_MARKER_REPLY,
	FTP_RC_120_SERVICE_READY_IN_NNN_MINUTES,
	FTP_RC_125_DATA_CONNECTION_ALREADY_OPEN_TRANSFER_STARTING,
	FTP_RC_150_FILE_STATUS_OKAY_ABOUT_TO_OPEN_DATA_CONNECTION,
	FTP_RC_200_COMMAND_OKAY,
	FTP_RC_202_COMMAND_NOT_IMPLEMENTED_SUPERFLUOUS_AT_THIS_SITE,
	FTP_RC_211_SYSTEM_STATUS_OR_SYSTEM_HELP_REPLY,
	FTP_RC_212_DIRECTORY_STATUS,
	FTP_RC_213_FILE_STATUS,
	FTP_RC_214_HELP_MESSAGE,
	FTP_RC_215_NAME_SYSTEM_TYPE,
	FTP_RC_220_SERVICE_READY_FOR_NEW_USER,
	FTP_RC_221_SERVICE_CLOSING_CONTROL_CONNECTION,
	FTP_RC_225_DATA_CONNECTION_OPEN_NO_TRANSFER_IN_PROGRESS,
	FTP_RC_226_CLOSING_DATA_CONNECTION,
	FTP_RC_227_ENTERING_PASSIVE_MODE,
	FTP_RC_228_ENTERING_LONG_PASSIVE_MODE,
	FTP_RC_229_EXTENDED_PASSIVE_MODE_ENTERED,
	FTP_RC_230_USER_LOGGED_IN_PROCEED,
	FTP_RC_250_REQUESTED_FILE_ACTION_OKAY_COMPLETED,
	FTP_RC_257_PATHNAME_CREATED,
	FTP_RC_331_USER_NAME_OKAY_NEED_PASSWORD,
	FTP_RC_332_NEED_ACCOUNT_FOR_LOGIN,
	FTP_RC_350_REQUESTED_FILE_ACTION_PENDING_FURTHER_INFORMATION,
	FTP_RC_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION,
	FTP_RC_425_CANNOT_OPEN_DATA_CONNECTION,
	FTP_RC_426_CONNECTION_CLOSED_TRANSFER_ABORTED,
	FTP_RC_450_REQUESTED_FILE_ACTION_NOT_TAKEN,
	FTP_RC_451_REQUESTED_ACTION_ABORTED_LOCAL_ERROR_IN_PROCESSING,
	FTP_RC_452_REQUESTED_ACTION_NOT_TAKEN,
	FTP_RC_500_SYNTAX_ERROR_COMMAND_UNRECOGNIZED,
	FTP_RC_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS,
	FTP_RC_502_COMMAND_NOT_IMPLEMENTED,
	FTP_RC_503_BAD_SEQUENCE_OF_COMMANDS,
	FTP_RC_504_COMMAND_NOT_IMPLEMENTED_FOR_THAT_PARAMETER,
	FTP_RC_521_SUPPORTED_ADDRESS_FAMILIES_ARE,
	FTP_RC_522_PROTOCOL_NOT_SUPPORTED,
	FTP_RC_530_NOT_LOGGED_IN,
	FTP_RC_532_NEED_ACCOUNT_FOR_STORING_FILES,
	FTP_RC_550_REQUESTED_ACTION_NOT_TAKEN,
	FTP_RC_551_REQUESTED_ACTION_ABORTED_PAGE_TYPE_UNKNOWN,
	FTP_RC_552_REQUESTED_FILE_ACTION_ABORTED,
	FTP_RC_553_REQUESTED_ACTION_NOT_TAKEN,
	FTP_RC_554_REQUESTED_ACTION_NOT_TAKEN_INVALID_REST_PARAMETER,
	FTP_RC_555_REQUESTED_ACTION_NOT_TAKEN_TYPE_OR_STRU_MISMATCH
} typedef FtpReplyCode;

class FtpInterface : public BodyInterface, public CommandInterface
{
public:
	//! Get string representing command \c.
	static std::string		commandToString( FtpCommand c );
	//! Get string representing description of command \c.
	static std::string		commandToDescriptionString( FtpCommand c );
	//! Get string representing reply code \c.
	static std::string		replyCodeToString( FtpReplyCode c );

	//! Converts entire message to ci::Buffer.
	ci::Buffer				toBuffer() const;
	//! Converts entire message to std::string.
	std::string				toString() const;

	//! Exception representing missing reply code
	class ExcReplyCodeNotFound : public ci::Exception
	{
	public:
		ExcReplyCodeNotFound( size_t replyCode ) throw();
		virtual const char* what() const throw()
		{
			return mMessage;
		}
	private:
		char mMessage[ 2048 ];
	};
protected:
	FtpInterface();

	friend std::ostream&	operator<<( std::ostream& out, const FtpInterface& h );
};

std::ostream&				operator<<( std::ostream& out, const FtpInterface& h );
